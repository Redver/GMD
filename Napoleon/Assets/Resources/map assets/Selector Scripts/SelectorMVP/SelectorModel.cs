using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using Resources.Features.Model.Units;
using UnityEngine;

namespace Resources.map_assets.Selector_Scripts.SelectorMVP
{
    public class SelectorModel
    {
        private SelectorPresenter selectorPresenter;
        
        private GameObject selectedProvinceObject;
        private Province selectedProvince;
        
        private GameObject currentCountryObject;
        private Nation currentCountryNation;
        
        private Coroutine decelerateRoutine;
        private MonoBehaviour coroutineRunner; 
        
        private bool unitSelected = false;
        
        private float speed = 0.01f;
        private float maxSpeed = 10f;
        private float minSpeed = 0.01f;

        private Stack<IUnit> units = new Stack<IUnit>();
        
        //Properties autogenerated by unity
        public SelectorModel(SelectorPresenter selectorPresenter)
        {
            this.selectorPresenter = selectorPresenter;
        }

        public bool canEndTurn()
        {
            return !unitSelected;
        }

        public void updateUnitSelected()
        {
            if (units.Count > 0)
            {
                unitSelected = true;
            }
            else
            {
                unitSelected = false;
            }
        }

        public bool canSelectUnit()
        {
            return selectedProvince.canSelectUnit();
        }

        public Nation getNation()
        {
            return currentCountryNation;
        }

        public bool canOpenBuildMenuHere()
        {
            return selectedProvince.getOwner() == currentCountryNation;
        }

        public bool canDeselectUnit()
        {
            return units.Count > 0;
        }

        public void selectUnitInProvince()
        {
            units.Push(selectedProvince.selectNextUnit());
            units.Peek().raiseSelectedUnit();
            updateUnitSelected();
        }

        public void delectUnitInProvince()
        {
            units.Peek().lowerSelectedUnit();
            units.Peek().getCurrentProvince().GetComponent<Province>().deselectUnit(units.Pop());
            updateUnitSelected();
        }

        public bool canDropUnit()
        {
            bool unitCanDropHere = false;
            if (units.Count > 0)
            {
                unitCanDropHere = units.Peek().canDropUnitHere(selectedProvince);
            }
            return unitCanDropHere;
        }

        public void dropUnitInProvince()
        {
            units.Peek().lowerSelectedUnit();
            units.Peek().decreaseMoves();
            units.Pop().dropSelectedUnit(selectedProvince);
            updateUnitSelected();
        }

        public void updateSelectedProvince(GameObject selectedProvinceObject)
        {
            SelectedProvinceObject = selectedProvinceObject;
            SelectedProvince = selectedProvinceObject.GetComponent<Province>();
        }
        
        
        public void SetCoroutineRunner(MonoBehaviour runner)
        {
            coroutineRunner = runner;
        }

        public void accelerate()
        {
            if (speed < maxSpeed)
            {
                speed += 10f * Time.deltaTime;
            }

            if (decelerateRoutine != null)
            {
                coroutineRunner.StopCoroutine(decelerateRoutine);
                decelerateRoutine = null;
            }
        }

        public void decelerate()
        {
            if (decelerateRoutine != null) return;

            decelerateRoutine = coroutineRunner.StartCoroutine(DecelerateOverTime());
        }

        public int getNumberOfUnits()
        {
            return units.Count();
        }

        public IUnit[] getAllUnits()
        {
            return units.ToArray();
        }

        private IEnumerator DecelerateOverTime()
        {
            while (speed > minSpeed)
            {
                speed -= 10f * Time.deltaTime;
                speed = Mathf.Max(speed, minSpeed);
                yield return null;
            }

            decelerateRoutine = null;
        }
        
        public GameObject SelectedProvinceObject
        {
            get => selectedProvinceObject;
            set => selectedProvinceObject = value;
        }
        
        public Province SelectedProvince
        {
            get => selectedProvince;
            set => selectedProvince = value;
        }

        public GameObject CurrentCountryObject
        {
            get => currentCountryObject;
            set => currentCountryObject = value;
        }

        public Nation CurrentCountryNation
        {
            get => currentCountryNation;
            set => currentCountryNation = value;
        }

        public bool UnitSelected
        {
            get => unitSelected;
            set => unitSelected = value;
        }
        
        public float Speed
        {
            get => speed;
            set => speed = value;
        }

    }
}